#!/bin/sh

echo_debug() {
	if [ -n "$PVDEBUG" ]; then
		echo "$@" >&2
	fi
}

lxc_pid() {
	target=$1
	nsenter --target 1 --mount -- lxc-info --no-humanize --pid "$target"
}

target=$USER
p=1
plat=${USER##*@}
plat_tty=${USER%@$plat}

if [ "$plat" = "$plat_tty" ]; then
	plat_tty=
fi

case "$plat" in
	"/"|"_pv_")
		# always unset plat_tty for pv env
		plat_tty=
		;;
	*)
		p="$(lxc_pid "$plat")"

		if [ -z "$p" ]; then
			echo "no container found: $plat" >&2
			exit 1
		fi
		;;
esac

# if we try to go for a tty, we use lxc-console ...
if [ -n "$plat_tty" ]; then
	exec lxc-console --name "$plat" -t "$plat_tty"
fi

PVUSER=${PVUSER:-root}
echo_debug "PVUSER: $PVUSER"

# get home directory and login shell from passwd entry, format is:
# name:password:UID:GID:GECOS:directory:shell
IFS=":" read -r _ _ _ _ _ home shell 2>/dev/null << EOF
$(nsenter --target "$p" --mount -- grep "^$PVUSER:" /etc/passwd)
EOF

# set default values if no passwd entry was found
shell="${shell:-/bin/sh}"
home="${home:-/tmp1}"

echo_debug "shell: $shell"
echo_debug "home: $home"

# Mimic the behavior of the OpenSSH daemon:
# https://github.com/openssh/openssh-portable/blob/31d8d231eb9377df474746a822d380c5d68d7ad6/session.c#L1679-L1714
if [ -z "$SSH_ORIGINAL_COMMAND" ]; then
	# OpenSSH prepends "-" to argv0 to spawn a login shell. This is not
	# possible in a shell script, so use the -l option, which most shells
	# support.
	set -- "$shell" -l
else
	# Use the user's login shell to run the original command.
	set -- "$shell" -c "$SSH_ORIGINAL_COMMAND"
fi

echo_debug running command: "$@"

# Use shell quoting magic to preserve arguments with whitespace, while changing
# to the home directory first: Arguments are only passed correctly with $@ in
# double quotes. To pass arguments to sh, the following form is used:
#
#    sh -c command_string [argv0 [argument...]]
#
# where argv0 is set to its default value "sh". The arguments to exec are in
# single quotes, so that the called sh process expands those arguments instead
# of the calling (i.e. this) process.
set -- sh -c "[ -x '$home' ] && cd '$home'; "'exec "$@"' sh "$@"

# Set environment variables, that are normally set by login(1)
USER="$PVUSER" LOGNAME="$PVUSER" HOME="$home" SHELL="$shell" SHLVL="" \
	exec nsenter --target "$p" --mount --net --pid --uts --ipc -- "$@"
