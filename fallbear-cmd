#!/bin/sh

echo_debug() {
    if [ -n "$PVDEBUG" ]; then
	echo $@
    fi
}

lxc_pid() {
    target=$1
    nsenter -m/proc/1/ns/mnt \
	    lxc-info $target | grep PID: | sed -e 's/^[^0-9]*//'
}

target=$USER
p=1
plat=${USER##*@}
plat_tty=${USER%@$plat}


if [ "$plat" = "$plat_tty" ]; then
	plat_tty=
fi

if ! [ "$plat" = "/" -o "$plat" = "_pv_"  ]; then
    p=`lxc_pid $plat`

    if [ -z "$p" ]; then
	echo "no container found: $plat"
	exit 1
    fi
else
	# always unset plat_tty for pv env
	plat_tty=
fi

# if we try to go for a tty, we use lxc-console ...
if [ -n "$plat_tty" ]; then
	lxc-console --name $plat -t $plat_tty
	exit $?
fi

PVUSER=${PVUSER:-root}
echo_debug PVUSER: $PVUSER
pwdline=`nsenter -m/proc/$p/ns/mnt -- [ -f /etc/passwd ] \
		 && (nsenter -m/proc/$p/ns/mnt cat /etc/passwd | grep ^$PVUSER:) \
		 || true`

shell=`echo $pwdline | sed -e 's/^.*:\([^:]*\)$/\1/'`
home=`echo $pwdline | sed -e 's/^.*:\([^:]*\):[^:]*$/\1/'`
echo_debug shell: $shell
echo_debug home: $home

# set default values if no passwd entry was found
shell="${shell:-/bin/sh}"
home="${home:-/tmp1}"

# Mimic the behavior of the OpenSSH daemon:
# https://github.com/openssh/openssh-portable/blob/31d8d231eb9377df474746a822d380c5d68d7ad6/session.c#L1679-L1714
if [ -z "$SSH_ORIGINAL_COMMAND" ]; then
	# OpenSSH prepends "-" to argv0 to spawn a login shell. This is not
	# possible in a shell script, so use the -l option, which most shells
	# support.
	set -- "$shell" -l
else
	# Use the user's login shell to run the original command.
	set -- "$shell" -c "$SSH_ORIGINAL_COMMAND"
fi

echo_debug running command: "$@"

# Use shell quoting magic to preserve arguments with whitespace, while changing
# to the home directory first: Arguments are only passed correctly with $@ in
# double quotes. To pass arguments to sh, the following form is used:
#
#    sh -c command_string [argv0 [argument...]]
#
# where argv0 is set to its default value "sh". The arguments to exec are in
# single quotes, so that the called sh process expands those arguments instead
# of the calling (i.e. this) process.
set -- sh -c "[ -x '$home' ] && cd '$home'; "'exec "$@"' sh "$@"

# Set environment variables, that are normally set by login(1)
USER="$PVUSER" LOGNAME="$PVUSER" HOME="$home" SHELL="$shell" SHLVL="" \
	exec nsenter --target "$p" --mount --net --pid --uts --ipc -- "$@"
